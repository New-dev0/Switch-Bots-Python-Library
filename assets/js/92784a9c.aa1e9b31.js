"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6986],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},b=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(t),b=o,m=c["".concat(s,".").concat(b)]||c[b]||u[b]||r;return t?a.createElement(m,i(i({ref:n},d),{},{components:t})):a.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=b;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},1314:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:2},i="Keyboards",l={unversionedId:"interactions/keyboards",id:"interactions/keyboards",title:"Keyboards",description:"The Message class contains a property called inline_markup where you can add buttons to allow the user interact with your bot. This is called an inline keyboard.",source:"@site/docs/interactions/keyboards.md",sourceDirName:"interactions",slug:"/interactions/keyboards",permalink:"/Switch-Bots-Python-Library/docs/interactions/keyboards",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/Switch-Bots-Python-Library/docs/interactions/commands"},next:{title:"Inline queries",permalink:"/Switch-Bots-Python-Library/docs/interactions/inline_queries"}},s={},p=[{value:"Creating an inline keyboard",id:"creating-an-inline-keyboard",level:2}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"keyboards"},"Keyboards"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Message")," class contains a property called ",(0,o.kt)("inlineCode",{parentName:"p"},"inline_markup")," where you can add buttons to allow the user interact with your bot. This is called an inline keyboard."),(0,o.kt)("h2",{id:"creating-an-inline-keyboard"},"Creating an inline keyboard"),(0,o.kt)("p",null,"You can create an inline keyboard using the ",(0,o.kt)("inlineCode",{parentName:"p"},"InlineKeyboard")," class. "),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"InlineKeyboard")," class has 3 properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"inline_keyboard"),": A list of lists (each list is an ",(0,o.kt)("inlineCode",{parentName:"li"},"inline_markup")," row, containing another list with one or more ",(0,o.kt)("inlineCode",{parentName:"li"},"InlineKeyboardButton"),") of ",(0,o.kt)("inlineCode",{parentName:"li"},"InlineKeyboardButton")," objects."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"size: InlikeKeyboardSize"),": The size of the keyboard. It can be ",(0,o.kt)("inlineCode",{parentName:"li"},"InlineKeyboardSize.DEFAULT")," (default value) or ",(0,o.kt)("inlineCode",{parentName:"li"},"InlineKeyboardSize.FULL_WIDTH"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"color: InlineKeyboardColor"),": The color of the keyboard. It can be ",(0,o.kt)("inlineCode",{parentName:"li"},"InlineKeyboardColor.RANDOM")," (default value), ",(0,o.kt)("inlineCode",{parentName:"li"},"InlineKeyboardColor.RED"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"InlineKeyboardColor.GREEN")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"InlineKeyboardColor.BLUE"),".")),(0,o.kt)("p",null,"This class contains a method called ",(0,o.kt)("inlineCode",{parentName:"p"},"add_button")," that allows you to add buttons to the keyboard. This method accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"InlineKeyboardButton")," object as a parameter."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"InlineKeyboardButton")," class has 3 properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"text"),": The text that will be shown on the button."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"callback_data"),": The data that will be sent to the bot when the button is pressed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"url"),": The URL that will be opened when the button is pressed.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can also add a inline keyboard passing a ",(0,o.kt)("em",{parentName:"p"},"list of lists")," (each list is an ",(0,o.kt)("inlineCode",{parentName:"p"},"inline_markup")," row, containing another list with one or more ",(0,o.kt)("inlineCode",{parentName:"p"},"InlineKeyboardButton"),") of ",(0,o.kt)("inlineCode",{parentName:"p"},"InlineKeyboardButton")," objects to the ",(0,o.kt)("inlineCode",{parentName:"p"},"inline_keyboard")," parameter of the ",(0,o.kt)("inlineCode",{parentName:"p"},"InlineMarkup")," class.")),(0,o.kt)("p",null,"Here is an example of how to create an inline keyboard, add it to a message and receive the callback data when the user presses a button:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom swibots import (\n    BotApp,\n    BotContext,\n    CallbackQueryEvent,\n    CommandEvent,\n    InlineMarkup,\n    InlineKeyboardButton,\n    regexp,\n)\n\n\nenv_file = os.path.join(os.path.dirname(__file__), "..", "..", ".env")\nload_dotenv(env_file)\n\n\nTOKEN = "YOUR_BOT_TOKEN"\n\n# initialize the app and register commands\napp = BotApp(\n    TOKEN,\n    auto_update_bot=False,  # disable auto update bot info\n)\n\n\n# register buttons command\n@app.on_command("buttons")\nasync def buttons_handler(ctx: BotContext[CommandEvent]):\n    m = await ctx.bot.prepare_response_message(ctx.event.message)\n    m.message = f"Please select an option:"\n\n    inline_keyboard = [\n        [\n            InlineKeyboardButton(text="Option 1", callback_data="option1"),\n            InlineKeyboardButton(text="Option 2", callback_data="option2"),\n        ],\n        [\n            InlineKeyboardButton(text="Option 3", callback_data="option3"),\n            InlineKeyboardButton(text="Option 4", callback_data="option4"),\n        ],\n    ]\n\n    m.inline_markup = InlineMarkup(inline_keyboard=inline_keyboard)\n    await ctx.bot.send_message(m)\n\n\n# handle callback query\n@app.on_callback_query(regexp(r"option\\d"))\nasync def callback_query_handler(ctx: BotContext[CallbackQueryEvent]):\n    message = ctx.event.message\n    message.message = f"Option with data: {ctx.event.callback_data} selected!"\n    await ctx.bot.edit_message(message)\n\n\napp.run()\n')))}c.isMDXComponent=!0}}]);